1 概述
    MySQL的索引是在存储引擎层实现的，不同的存储引擎有不同的索引结构，主要包含以下几种

    索引结构                 描述
    B+Tree索引              最常见的索引类型，大部分引擎都支持 B+ 树索引
    Hash索引                底层数据结构是用哈希表实现的, 只有精确匹配索引列的查询才有效, 不支持范围查询
    R-tree(空间索引）        空间索引是MyISAM引擎的一个特殊索引类型，主要用于地理空间数据类型，通常使用较少
    Full-text(全文索引)      是一种通过建立倒排索引,快速匹配文档的方式。类似于Lucene,Solr,ES

    上述是MySQL中所支持的所有的索引结构，接下来，我们再来看看不同的存储引擎对于索引结构的支持
    情况。


    索引            InnoDB          MyISAM      Memory
    B+tree 索引     支持            支持         支持
    Hash 索引       不支持          不支持       支持
    R-tree 索引     不支持           支持        不支持
    Full-text       5.6版本之后支持  支持        不支持

    注意： 我们平常所说的索引，如果没有特别指明，都是指B+树结构组织的索引。


2 二叉树
    假如说MySQL的索引结构采用二叉树的数据结构，比较理想的结构如下


    如果主键是顺序插入的，则会形成一个单向链表，结构如下：

    所以，如果选择二叉树作为索引结构，会存在以下缺点：
        - 顺序插入时，会形成一个链表，查询性能大大降低。
        - 大数据量情况下，层级较深，检索速度慢。

    此时大家可能会想到，我们可以选择红黑树，红黑树是一颗自平衡二叉树，那这样即使是顺序插入数
    据，最终形成的数据结构也是一颗平衡的二叉树,结构如下

    但是，即使如此，由于红黑树也是一颗二叉树，所以也会存在一个缺点：
        - 大数据量情况下，层级较深，检索速度慢。

    所以，在MySQL的索引结构中，并没有选择二叉树或者红黑树，而选择的是B+Tree，那么什么是
    B+Tree呢？在详解B+Tree之前，先来介绍一个B-Tree。


3 B-Tree
    B-Tree，B树是一种多叉路衡查找树，相对于二叉树，B树每个节点可以有多个分支，即多叉。
    以一颗最大度数（max-degree）为5(5阶)的b-tree为例，那这个B树每个节点最多存储4个key，5
    个指针：

    知识小贴士: 树的度数指的是一个节点的子节点个数。

    我们可以通过一个数据结构可视化的网站来简单演示一下。 https://www.cs.usfca.edu/~galles/visualization/BTree.html

    插入一组数据： 100 65 169 368 900 556 780 35 215 1200 234 888 158 90 1000 88 120 268 250 。然后观察一些数据插入过程中，节点的变化情况。


    特点：
        - 5阶的B树，每一个节点最多存储4个key，对应5个指针。
        - 一旦节点存储的key数量到达5，就会裂变，中间元素向上分裂(中间元素到上面一级)。
        - 在B树中，非叶子节点和叶子节点都会存放数据。


4 B+Tree
    B+Tree是B-Tree的变种，我们以一颗最大度数（max-degree）为4（4阶）的b+tree为例，来看一
    下其结构示意图：

    我们可以看到，两部分：
        - 绿色框框起来的部分，是索引部分，仅仅起到索引数据的作用，不存储数据。
        - 红色框框起来的部分，是数据存储部分，在其叶子节点中要存储具体的数据。

    我们可以通过一个数据结构可视化的网站来简单演示一下。 https://www.cs.usfca.edu/~galles/visualization/BPlusTree.html

    插入一组数据： 100 65 169 368 900 556 780 35 215 1200 234 888 158 90 1000 88 120 268 250 。然后观察一些数据插入过程中，节点的变化情况。

    最终我们看到，B+Tree 与 B-Tree相比，主要有以下三点区别：
        - 所有的数据都会出现在叶子节点。
        - 叶子节点形成一个单向链表。
        - 非叶子节点仅仅起到索引数据作用，具体的数据都是在叶子节点存放的。

    上述我们所看到的结构是标准的B+Tree的数据结构，接下来，我们再来看看MySQL中优化之后的B+Tree。

    MySQL索引数据结构对经典的B+Tree进行了优化。在原B+Tree的基础上，增加一个指向相邻叶子节点
    的链表指针，就形成了带有顺序指针的B+Tree，提高区间访问的性能，利于排序。


5 Hash
    MySQL中除了支持B+Tree索引，还支持一种索引类型---Hash索引。

    1). 结构
        哈希索引就是采用一定的hash算法，将键值换算成新的hash值，映射到对应的槽位上，然后存储在
        hash表中

        如果两个(或多个)键值，映射到一个相同的槽位上，他们就产生了hash冲突（也称为hash碰撞），可以通过链表来解决。

    2). 特点
        A. Hash索引只能用于对等比较(=，in)，不支持范围查询（between，>，< ，...）
        B. 无法利用索引完成排序操作
        C. 查询效率高，通常(不存在hash冲突的情况)只需要一次检索就可以了，效率通常要高于B+tree索引

    3). 存储引擎支持
        在MySQL中，支持hash索引的是Memory存储引擎。 而InnoDB中具有自适应hash功能，hash索引是
        InnoDB存储引擎根据B+Tree索引在指定条件下自动构建的。

    思考题： 为什么InnoDB存储引擎选择使用B+tree索引结构?
        A. 相对于二叉树，层级更少，搜索效率高；
        B. 对于B-tree，无论是叶子节点还是非叶子节点，都会保存数据，这样导致一页中存储
            的键值减少，指针跟着减少，要同样保存大量数据，只能增加树的高度，导致性能降低；
        C. 相对Hash索引，B+tree支持范围匹配及排序操作；
